def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    ndkVersion '25.1.8937393'
    compileSdkVersion 33

    defaultConfig {
        applicationId "co.perish.potassius"
        minSdkVersion 21
        targetSdkVersion 33
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        // Flag to enable support for the new language APIs
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

   signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
   }

    buildTypes {
       release {
            signingConfig signingConfigs.release
            // minifyEnabled true
            // https://github.com/juliansteenbakker/mobile_scanner/issues/221
            minifyEnabled false
            shrinkResources false
            // proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            // ndk {
            //     abiFilters 'armeabi-v7a','arm64-v8a','x86_64'
            // }
       }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "com.bottlerocketstudios:vault:1.4.2"
    implementation 'androidx.multidex:multidex:2.0.1'

    // barcode scanning:
    implementation 'com.google.mlkit:barcode-scanning:17.0.2'

    // local notifications:
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    // todo: may not be necessary (https://github.com/flutter/flutter/issues/110658)
    implementation 'androidx.window:window:1.1.0-alpha04'
    // implementation 'androidx.window:window-java:1.1.0-alpha04'

    // required for all Android apps
    // implementation 'io.branch.sdk.android:library:'
    implementation 'io.branch.sdk.android:library:5.+'
    // required if your app is in the Google Play Store (tip: avoid using bundled play services libs)
    implementation 'com.google.android.gms:play-services-ads-identifier:17.1.0+'
    // optional
    // Chrome Tab matching (enables 100% guaranteed matching based on cookies)
    implementation 'androidx.browser:browser:1.4.0'
}


// [ 
//     new Tuple2('Debug', ''),
//     new Tuple2('Profile', '--release'),
//     new Tuple2('Release', '--release'),
// ].each {
//     def taskPostfix = it.first
//     def profileMode = it.second

//     tasks.whenTaskAdded { task ->
//         if (task.name == "javaPreCompile$taskPostfix") {
//             task.dependsOn "cargoBuild${taskPostfix}"
//         }
//     }
//     tasks.register("cargoBuild$taskPostfix", Exec) {
//         // Until https://github.com/bbqsrc/cargo-ndk/pull/13 is merged,
//         // this workaround is necessary.

//         def ndk_command = """cargo ndk \
//             -t armeabi-v7a -t arm64-v8a -t x86_64 -t x86 \
//             -o ../android/app/src/main/jniLibs build $profileMode"""

//         workingDir "../../rust"
//         environment "ANDROID_NDK_HOME", "$ANDROID_NDK"
//         if (org.gradle.nativeplatform.platform.internal.DefaultNativePlatform.currentOperatingSystem.isWindows()) {
//             commandLine 'cmd', '/C', ndk_command
//         } else {
//             commandLine 'sh', '-c', ndk_command
//         }
//     }
// }